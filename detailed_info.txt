# Gamify Journal Project - Detailed Information

This document provides comprehensive information about the Gamify Journal project. Its purpose is to guide developers (both human and AI) working on this codebase, ensuring consistency, clarity, and efficient development. Please keep this document updated as the project evolves.

## 1. Project Overview

*   **Purpose**: To make journaling more engaging and consistent by incorporating RPG-like game mechanics.
*   **Goals**:
    *   Encourage daily or regular journaling habits.
    *   Provide users with a sense of progress, achievement, and character development through journaling.
    *   Create a simple, intuitive, and visually appealing user interface.
*   **Target Audience**: Individuals looking to build/maintain a journaling habit, users interested in self-improvement, people who enjoy gamified experiences or RPG elements.

## 2. Technology Stack

*   **Frontend Language**: TypeScript 5.x
*   **Frontend Framework/Library**: Next.js 15.2.4 (React 19.x)
*   **Backend Language**: Go (e.g., 1.24.2+)
*   **Backend Framework/Router**: Chi (v5)
*   **Database**: PostgreSQL (confirmed via `DB_DSN` for Go backend)
*   **ORM/Database Client**: GORM (`gorm.io/gorm`)
*   **Backend Libraries**:
    *   `gorm.io/driver/postgres` (PostgreSQL driver for GORM)
    *   `github.com/google/uuid` (UUID generation)
    *   `golang.org/x/crypto/bcrypt` (Password hashing)
*   **Styling**: Tailwind CSS 3.4.17 (using shadcn/ui components)
*   **State Management (Frontend)**: React Context API / Local State (Default Next.js/React, check for dedicated library usage if needed)
*   **External APIs/Services**:
    *   [List any external services, e.g., OpenAI API for potential AI features, Stripe for payments (if planned)]
*   **Development Tools**:
    *   Package Managers: Go Modules (backend), pnpm (frontend)
    *   Linters: `gofmt` (standard Go formatter), `golangci-lint` (Recommended for Go), ESLint (Frontend - via `next lint`)
    *   Formatters: `gofmt` (standard Go formatter), Prettier (Frontend - assumed, check config)
    *   Build Tools: Go build tools (`go build`), Next.js build process
    *   Testing Frameworks: Go testing package (`go test`), [e.g., Jest/React Testing Library (Frontend - add if used)]
    *   Version Control: Git

## 3. Architecture Overview

*   **High-Level Design**: Monolithic application with distinct frontend (Next.js) and backend (Go with Chi router) components. API-driven communication. The Go backend code (`cmd/`, `internal/`) resides at the project root alongside frontend code.
*   **Key Components**:
    *   **Go Backend** (at project root): Handles API requests, business logic, database interactions.
        *   `cmd/server/main.go`: Main application entry point, server setup.
        *   `internal/models/`: Go struct definitions for database schema (using GORM tags).
        *   `internal/<module>/<module>_handler.go` (e.g., `internal/user/user_handler.go`): HTTP request handlers (Chi). Defines request/response DTOs.
        *   `internal/<module>/<module>_service.go` (e.g., `internal/user/user_service.go`): Business logic for specific modules.
        *   `internal/<module>/<module>_store.go` (e.g., `internal/user/user_store.go`): Data persistence logic using GORM.
        *   `internal/platform/database/database.go`: Database connection (GORM) and session management.
        *   Authentication logic would reside in relevant Go packages/modules (e.g., using bcrypt for passwords, JWT library for tokens).
    *   **Frontend** (Next.js application structure, also at project root):
        *   `app/`: Next.js App Router structure (pages, layouts).
        *   `components/`: Reusable UI elements (likely shadcn/ui based).
        *   `lib/`: Utility functions (e.g., `cn` for classnames).
        *   `hooks/`: Custom React hooks.
        *   `styles/`: Global CSS (`globals.css`).
*   **Data Flow**: User interacts with Next.js Frontend -> Frontend sends API request to Go Backend -> Backend processes request (validates DTOs, interacts with DB via GORM, applies gamification logic) -> Backend sends JSON response to Frontend -> Frontend updates UI (React state).
*   **Design Patterns**: Separation of concerns (handler -> service -> store in Go backend), Dependency Injection (Go practices), [List other key patterns, e.g., Repository pattern (potentially in DB interactions with GORM)]

## 4. Setup and Installation

*   **Prerequisites**:
    *   Go (e.g., version 1.24.2+ as per `go.mod` or project requirements)
    *   Node.js v18+ (Recommended for Next.js/pnpm)
    *   pnpm (`npm install -g pnpm`)
    *   [Database Server if not using SQLite, e.g., PostgreSQL]
*   **Cloning**:
    *   Repository: `[Link to your Git repository]`
    *   Command: `git clone [Repository URL]`
    *   Main Branch: `main` (or `master`)
    *   Development Branches: Feature branches named like `feature/add-streak-counter`, bugfixes `fix/login-error`.
*   **Dependency Installation**:
    *   Backend (Go): `go mod tidy` (run in project root, downloads dependencies defined in `go.mod`)
    *   Frontend: `pnpm install` (run in project root)
*   **Configuration**:
    *   Backend (Go): Uses environment variables. Key variable is `DB_DSN` for PostgreSQL connection (e.g., `export DB_DSN="host=localhost user=youruser password=yourpassword dbname=gamify_journal_db port=5432 sslmode=disable TimeZone=UTC"`). Other variables like `PORT` might be used. No `.env` file usage confirmed, manage environment variables directly.
    *   Frontend: Copy `.env.local.example` to `.env.local` (if exists) and fill variables (e.g., `NEXT_PUBLIC_API_URL=http://localhost:8080` - adjust port if Go backend uses a different one).
    *   Ensure backend secrets are managed securely (not committed to Git).
*   **Database Setup**:
    *   Ensure PostgreSQL server is running.
    *   Configure `DB_DSN` environment variable for the Go backend.
    *   Create the database if necessary (e.g., `CREATE DATABASE gamify_journal_db;`).
    *   Database migrations are handled automatically by GORM on application startup (`DB.AutoMigrate()` in `internal/platform/database/database.go`).
    *   (Optional) Seed database: [Add command if seeding scripts exist for Go backend]
*   **Secrets Management**:
    *   Sensitive keys (API keys, production database credentials like `DB_DSN`, any backend secret keys) should NEVER be committed to Git.
    *   Use environment variables for local development and production/staging (provided by hosting platform or secrets manager).

## 5. Running the Project

*   **Development Servers**:
    *   Backend (Go): `go run cmd/server/main.go` (run in project root). Server typically runs on port 8080 unless `PORT` env var is set.
    *   Frontend: `pnpm dev` (run in project root)
*   **Running Tests**:
    *   Backend (Go): `go test ./...` or `go test ./internal/...` (run in project root, or specific package path).
    *   Frontend: `pnpm test` (Configure test runner like Jest if needed)
*   **Linting/Formatting**:
    *   Backend (Go): `gofmt -w .` (to format all Go files in the current directory and subdirectories), `golangci-lint run` (if `golangci-lint` is installed and configured).
    *   Frontend: `pnpm lint` (Uses Next.js built-in ESLint) / `pnpm format` (Add Prettier script if needed)

## 6. Codebase Structure

*   **Project Root (`gamify_journal/`)**: Contains both frontend and backend code.
    *   `cmd/server/main.go`: Go backend application entry point.
    *   `internal/`: Go backend internal packages.
        *   `internal/models/`: Database models (GORM structs).
        *   `internal/user/`: Example module for user functionality (handlers, services, stores).
        *   `internal/platform/database/`: Database connection and migration logic.
        *   Other modules as the project grows.
    *   `pkg/`: (Optional) Go backend shared libraries if any.
    *   `go.mod`: Go backend module definition and dependencies.
    *   `go.sum`: Go backend dependency checksums.
    *   `app/`: Next.js App Router directory (layouts, pages, components for frontend).
    *   `components/`: Shared UI components (likely includes shadcn/ui components for frontend).
    *   `hooks/`: Custom React hooks (frontend).
    *   `lib/`: Utility functions, potentially API client setup (frontend).
    *   `public/`: Static assets served directly.
    *   `styles/`: Global stylesheets (`globals.css`).
    *   `package.json`: Frontend dependencies and scripts (uses pnpm).
    *   `pnpm-lock.yaml`: Frontend lock file.
    *   `tailwind.config.ts`: Tailwind CSS configuration.
    *   `postcss.config.mjs`: PostCSS configuration.
    *   `tsconfig.json`: TypeScript configuration.
    *   `next.config.mjs`: Next.js configuration.
    *   `tests/`: (Recommended) Frontend tests.
*   `detailed_info.txt`: This file.
*   `README.md`: High-level project overview and basic setup instructions.
*   `.gitignore`: Specifies files/directories ignored by Git.

## 7. Coding Standards and Conventions

*   **Style Guides**:
    *   Backend (Go): Effective Go guidelines. Formatting enforced by `gofmt`. Use `golangci-lint` for comprehensive linting (Recommended).
    *   Frontend: ESLint (via `next lint`). Prettier for formatting (Recommended - configure `package.json` script).
*   **Naming Conventions**:
    *   Go: Use `camelCase` for unexported identifiers, `PascalCase` (CamelCase with first letter uppercase) for exported identifiers. Package names are typically short, lowercase, single words.
    *   Frontend: [Specify frontend naming conventions, e.g., PascalCase for React components, camelCase for variables/functions].
*   **Commit Messages**: [e.g., Conventional Commits: `feat: add user login endpoint`, `fix: resolve issue with quest completion`]
*   **Branching Strategy**: [e.g., Gitflow variant: `main`, `develop`, feature branches (`feature/feature-name`), bugfix branches (`bugfix/bug-name`), release branches (`release/version`)]

## 8. API Endpoints

*   Refer to the Go backend handlers (e.g., `internal/user/user_handler.go`) or API documentation (e.g., Swagger/OpenAPI if generated) for detailed API specifications.
*   Initial endpoints (as per Go backend details):
    *   `GET /health`: Health check.
    *   `POST /api/v1/users/register`: Register a new user.
    *   `POST /api/v1/auth/login`: Login an existing user.
    *   `GET /api/v1/users/{userID}`: Get user details by ID.

## 9. Deployment

*   **Frontend (Next.js)**: [e.g., Vercel, Netlify, AWS Amplify, Docker container]
*   **Backend (Go)**: [e.g., Docker container on Cloud Run/ECS/Kubernetes, bare metal, serverless function if applicable]
*   **Database (PostgreSQL)**: [e.g., Cloud SQL, RDS, self-hosted]
*   **CI/CD**: [e.g., GitHub Actions, GitLab CI, Jenkins. Describe pipeline steps: lint, test, build, deploy.]

## 10. Future Considerations / Roadmap

*   Implement JWT token generation and authentication middleware for Go backend.
*   Expand unit test coverage for all service methods and edge cases in `user_service_test.go`.
*   Consider integration tests for the store layer (interacting with a test database).
*   Consider E2E/integration tests for HTTP handlers.
*   [Add other planned features or improvements]

---

This document aims to be a living guide. Please update it as the project evolves.